{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/calculate-import-vat/src/context/FormContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  currentStep: 0,\n  name: '',\n  level: 0,\n  email: '',\n  github: ''\n}; // Context API\n\nconst FormContext = /*#__PURE__*/createContext(undefined); // Reducer\n\nexport let FormActions;\n\n(function (FormActions) {\n  FormActions[FormActions[\"setCurrentStep\"] = 0] = \"setCurrentStep\";\n  FormActions[FormActions[\"setName\"] = 1] = \"setName\";\n  FormActions[FormActions[\"setLevel\"] = 2] = \"setLevel\";\n  FormActions[FormActions[\"setEmail\"] = 3] = \"setEmail\";\n  FormActions[FormActions[\"setGithub\"] = 4] = \"setGithub\";\n})(FormActions || (FormActions = {}));\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case FormActions.setCurrentStep:\n      return { ...state,\n        currentStep: action.payload\n      };\n\n    case FormActions.setName:\n      return { ...state,\n        name: action.payload\n      };\n\n    case FormActions.setLevel:\n      return { ...state,\n        level: action.payload\n      };\n\n    case FormActions.setEmail:\n      return { ...state,\n        email: action.payload\n      };\n\n    case FormActions.setGithub:\n      return { ...state,\n        github: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // Provider\n\n\nexport const FormProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(formReducer, initialData);\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}; // Hooks Context\n\n_s(FormProvider, \"V91aNRjY5B4p0Ob5EecXATatID0=\");\n\n_c = FormProvider;\nexport const useForm = () => {\n  _s2();\n\n  const context = useContext(FormContext);\n\n  if (context === undefined) {\n    throw new Error('useForm precisa ser usado dentro do FormProvider');\n  }\n\n  return context;\n};\n\n_s2(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"sources":["/Users/mac/Desktop/calculate-import-vat/src/context/FormContext.tsx"],"names":["createContext","useContext","useReducer","initialData","currentStep","name","level","email","github","FormContext","undefined","FormActions","formReducer","state","action","type","setCurrentStep","payload","setName","setLevel","setEmail","setGithub","FormProvider","children","dispatch","value","useForm","context","Error"],"mappings":";;;;AAAA,SAAQA,aAAR,EAAkCC,UAAlC,EAA8CC,UAA9C,QAA+D,OAA/D;;AA0BA,MAAMC,WAAkB,GAAG;AACvBC,EAAAA,WAAW,EAAE,CADU;AAEvBC,EAAAA,IAAI,EAAE,EAFiB;AAGvBC,EAAAA,KAAK,EAAE,CAHgB;AAIvBC,EAAAA,KAAK,EAAE,EAJgB;AAKvBC,EAAAA,MAAM,EAAE;AALe,CAA3B,C,CAQA;;AACA,MAAMC,WAAW,gBAAGT,aAAa,CAA0BU,SAA1B,CAAjC,C,CAEA;;AACA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W;;AAQZ,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,WAAW,CAACK,cAAjB;AACI,aAAO,EAAC,GAAGH,KAAJ;AAAWT,QAAAA,WAAW,EAAEU,MAAM,CAACG;AAA/B,OAAP;;AACJ,SAAKN,WAAW,CAACO,OAAjB;AACI,aAAO,EAAC,GAAGL,KAAJ;AAAWR,QAAAA,IAAI,EAAES,MAAM,CAACG;AAAxB,OAAP;;AACJ,SAAKN,WAAW,CAACQ,QAAjB;AACI,aAAO,EAAC,GAAGN,KAAJ;AAAWP,QAAAA,KAAK,EAAEQ,MAAM,CAACG;AAAzB,OAAP;;AACJ,SAAKN,WAAW,CAACS,QAAjB;AACI,aAAO,EAAC,GAAGP,KAAJ;AAAWN,QAAAA,KAAK,EAAEO,MAAM,CAACG;AAAzB,OAAP;;AACJ,SAAKN,WAAW,CAACU,SAAjB;AACI,aAAO,EAAC,GAAGR,KAAJ;AAAWL,QAAAA,MAAM,EAAEM,MAAM,CAACG;AAA1B,OAAP;;AACJ;AACI,aAAOJ,KAAP;AAZR;AAgBH,CAjBD,C,CAmBA;;;AACA,OAAO,MAAMS,YAAY,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAACC,IAAAA;AAAD,GAAkC;AAC3D,QAAM,CAACV,KAAD,EAAQW,QAAR,IAAoBtB,UAAU,CAACU,WAAD,EAAcT,WAAd,CAApC;AACA,QAAMsB,KAAK,GAAG;AAACZ,IAAAA,KAAD;AAAQW,IAAAA;AAAR,GAAd;AAEA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,KAA7B;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CATM,C,CAWP;;GAXaD,Y;;KAAAA,Y;AAYb,OAAO,MAAMI,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAMC,OAAO,GAAG1B,UAAU,CAACQ,WAAD,CAA1B;;AACA,MAAIkB,OAAO,KAAKjB,SAAhB,EAA2B;AACvB,UAAM,IAAIkB,KAAJ,CAAU,kDAAV,CAAN;AACH;;AACD,SAAOD,OAAP;AACH,CANM;;IAAMD,O","sourcesContent":["import {createContext, ReactNode, useContext, useReducer} from 'react'\n\ntype State = {\n    currentStep: number\n    name: string\n    level: 0 | 1\n    email: string\n    github: string\n\n}\n\ntype Action = {\n    type: FormActions\n    payload: any\n}\n\ntype ContextType = {\n    state: State\n    dispatch: (action: Action) => void\n\n}\n\ntype FormProviderProps = {\n    children: ReactNode\n}\n\nconst initialData: State = {\n    currentStep: 0,\n    name: '',\n    level: 0,\n    email: '',\n    github: ''\n}\n\n// Context API\nconst FormContext = createContext<ContextType | undefined>(undefined)\n\n// Reducer\nexport enum FormActions {\n    setCurrentStep,\n    setName,\n    setLevel,\n    setEmail,\n    setGithub\n}\n\nconst formReducer = (state: State, action: Action) => {\n    switch (action.type) {\n        case FormActions.setCurrentStep:\n            return {...state, currentStep: action.payload}\n        case FormActions.setName:\n            return {...state, name: action.payload}\n        case FormActions.setLevel:\n            return {...state, level: action.payload}\n        case FormActions.setEmail:\n            return {...state, email: action.payload}\n        case FormActions.setGithub:\n            return {...state, github: action.payload}\n        default:\n            return state\n\n    }\n\n}\n\n// Provider\nexport const FormProvider = ({children}: FormProviderProps) => {\n    const [state, dispatch] = useReducer(formReducer, initialData)\n    const value = {state, dispatch}\n\n    return (\n        <FormContext.Provider value={value}>\n            {children}\n        </FormContext.Provider>\n    )\n}\n\n// Hooks Context\nexport const useForm = () => {\n    const context = useContext(FormContext)\n    if (context === undefined) {\n        throw new Error('useForm precisa ser usado dentro do FormProvider')\n    }\n    return context\n}\n"]},"metadata":{},"sourceType":"module"}