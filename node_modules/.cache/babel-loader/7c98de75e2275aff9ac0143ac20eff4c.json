{"ast":null,"code":"import React, { useRef, useEffect, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\nimport useForwardedRef from '@bedrock-layout/use-forwarded-ref';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar CloseIcon = function CloseIcon(_ref) {\n  var classes = _ref.classes,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      id = _ref.id,\n      closeIcon = _ref.closeIcon,\n      onClick = _ref.onClick;\n  return React.createElement(\"button\", {\n    id: id,\n    className: cx(classes.closeButton, classNames == null ? void 0 : classNames.closeButton),\n    style: styles == null ? void 0 : styles.closeButton,\n    onClick: onClick,\n    \"data-testid\": \"close-button\"\n  }, closeIcon ? closeIcon : React.createElement(\"svg\", {\n    className: classNames == null ? void 0 : classNames.closeIcon,\n    style: styles == null ? void 0 : styles.closeIcon,\n    width: 28,\n    height: 28,\n    viewBox: \"0 0 36 36\",\n    \"data-testid\": \"close-icon\"\n  }, React.createElement(\"path\", {\n    d: \"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\"\n  })));\n};\n\nvar isBrowser = typeof window !== 'undefined'; // https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.1.0\n\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'];\n\nfunction isHidden(node) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return node.offsetParent === null || getComputedStyle(node).visibility === 'hidden';\n}\n\nfunction getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isNotRadioOrTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio' || !node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + node.name + '\"]');\n  var checked = getCheckedRadio(radioSet, node.form);\n  return checked === node || checked === undefined && radioSet[0] === node;\n}\n\nfunction getAllTabbingElements(parentElem) {\n  var currentActiveElement = document.activeElement;\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n\n    if (currentActiveElement === node || !node.disabled && getTabindex(node) > -1 && !isHidden(node) && isNotRadioOrTabbableRadio(node)) {\n      onlyTabbable.push(node);\n    }\n  }\n\n  return onlyTabbable;\n}\n\nfunction tabTrappingKey(event, parentElem) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n\n  return false;\n}\n\nfunction getTabindex(node) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n  if (!isNaN(tabindexAttr)) return tabindexAttr; // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node) {\n  return node.getAttribute('contentEditable');\n}\n\nvar FocusTrap = function FocusTrap(_ref) {\n  var container = _ref.container,\n      initialFocusRef = _ref.initialFocusRef;\n  var refLastFocus = useRef();\n  /**\r\n   * Handle focus lock on the modal\r\n   */\n\n  useEffect(function () {\n    var handleKeyEvent = function handleKeyEvent(event) {\n      if (container == null ? void 0 : container.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    } // On mount we focus on the first focusable element in the modal if there is one\n\n\n    if (isBrowser && (container == null ? void 0 : container.current)) {\n      var savePreviousFocus = function savePreviousFocus() {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (candidateSelectors.findIndex(function (selector) {\n          var _document$activeEleme;\n\n          return (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.matches(selector);\n        }) !== -1) {\n          refLastFocus.current = document.activeElement;\n        }\n      };\n\n      if (initialFocusRef) {\n        savePreviousFocus(); // We need to schedule focusing on a next frame - this allows to focus on the modal root\n\n        requestAnimationFrame(function () {\n          var _initialFocusRef$curr;\n\n          (_initialFocusRef$curr = initialFocusRef.current) == null ? void 0 : _initialFocusRef$curr.focus();\n        });\n      } else {\n        var allTabbingElements = getAllTabbingElements(container.current);\n\n        if (allTabbingElements[0]) {\n          savePreviousFocus();\n          allTabbingElements[0].focus();\n        }\n      }\n    }\n\n    return function () {\n      if (isBrowser) {\n        var _refLastFocus$current;\n\n        document.removeEventListener('keydown', handleKeyEvent); // On unmount we restore the focus to the last focused element\n\n        (_refLastFocus$current = refLastFocus.current) == null ? void 0 : _refLastFocus$current.focus();\n      }\n    };\n  }, [container, initialFocusRef]);\n  return null;\n};\n\nvar modals = [];\n/**\r\n * Handle the order of the modals.\r\n * Inspired by the material-ui implementation.\r\n */\n\nvar modalManager = {\n  /**\r\n   * Register a new modal\r\n   */\n  add: function add(newModal) {\n    modals.push(newModal);\n  },\n\n  /**\r\n   * Remove a modal\r\n   */\n  remove: function remove(oldModal) {\n    modals = modals.filter(function (modal) {\n      return modal !== oldModal;\n    });\n  },\n\n  /**\r\n   * When multiple modals are rendered will return true if current modal is the last one\r\n   */\n  isTopModal: function isTopModal(modal) {\n    return !!modals.length && modals[modals.length - 1] === modal;\n  }\n};\n\nfunction useModalManager(ref, open) {\n  useEffect(function () {\n    if (open) {\n      modalManager.add(ref);\n    }\n\n    return function () {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n\nvar useScrollLock = function useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap) {\n  var oldRef = useRef(null);\n  useEffect(function () {\n    if (open && refModal.current && blockScroll) {\n      oldRef.current = refModal.current;\n      disableBodyScroll(refModal.current, {\n        reserveScrollBarGap: reserveScrollBarGap\n      });\n    }\n\n    return function () {\n      if (oldRef.current) {\n        enableBodyScroll(oldRef.current);\n        oldRef.current = null;\n      }\n    };\n  }, [open, showPortal, refModal, blockScroll, reserveScrollBarGap]);\n};\n\nvar classes = {\n  root: 'react-responsive-modal-root',\n  overlay: 'react-responsive-modal-overlay',\n  overlayAnimationIn: 'react-responsive-modal-overlay-in',\n  overlayAnimationOut: 'react-responsive-modal-overlay-out',\n  modalContainer: 'react-responsive-modal-container',\n  modalContainerCenter: 'react-responsive-modal-containerCenter',\n  modal: 'react-responsive-modal-modal',\n  modalAnimationIn: 'react-responsive-modal-modal-in',\n  modalAnimationOut: 'react-responsive-modal-modal-out',\n  closeButton: 'react-responsive-modal-closeButton'\n};\nvar Modal = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _classNames$overlayAn, _classNames$overlayAn2, _classNames$modalAnim, _classNames$modalAnim2;\n\n  var open = _ref.open,\n      center = _ref.center,\n      _ref$blockScroll = _ref.blockScroll,\n      blockScroll = _ref$blockScroll === void 0 ? true : _ref$blockScroll,\n      _ref$closeOnEsc = _ref.closeOnEsc,\n      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n      container = _ref.container,\n      _ref$showCloseIcon = _ref.showCloseIcon,\n      showCloseIcon = _ref$showCloseIcon === void 0 ? true : _ref$showCloseIcon,\n      closeIconId = _ref.closeIconId,\n      closeIcon = _ref.closeIcon,\n      _ref$focusTrapped = _ref.focusTrapped,\n      focusTrapped = _ref$focusTrapped === void 0 ? true : _ref$focusTrapped,\n      _ref$initialFocusRef = _ref.initialFocusRef,\n      initialFocusRef = _ref$initialFocusRef === void 0 ? undefined : _ref$initialFocusRef,\n      _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? 300 : _ref$animationDuratio,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? 'dialog' : _ref$role,\n      ariaDescribedby = _ref.ariaDescribedby,\n      ariaLabelledby = _ref.ariaLabelledby,\n      modalId = _ref.modalId,\n      onClose = _ref.onClose,\n      onEscKeyDown = _ref.onEscKeyDown,\n      onOverlayClick = _ref.onOverlayClick,\n      onAnimationEnd = _ref.onAnimationEnd,\n      children = _ref.children,\n      reserveScrollBarGap = _ref.reserveScrollBarGap;\n  var refDialog = useForwardedRef(ref);\n  var refModal = useRef(null);\n  var refShouldClose = useRef(null);\n  var refContainer = useRef(null); // Lazily create the ref instance\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n\n  if (refContainer.current === null && isBrowser) {\n    refContainer.current = document.createElement('div');\n  } // The value should be false for srr, that way when the component is hydrated client side,\n  // it will match the server rendered content\n\n\n  var _useState = useState(false),\n      showPortal = _useState[0],\n      setShowPortal = _useState[1]; // Hook used to manage multiple modals opened at the same time\n\n\n  useModalManager(refModal, open); // Hook used to manage the scroll\n\n  useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap);\n\n  var handleOpen = function handleOpen() {\n    if (refContainer.current && !container && !document.body.contains(refContainer.current)) {\n      document.body.appendChild(refContainer.current);\n    }\n\n    document.addEventListener('keydown', handleKeydown);\n  };\n\n  var handleClose = function handleClose() {\n    if (refContainer.current && !container && document.body.contains(refContainer.current)) {\n      document.body.removeChild(refContainer.current);\n    }\n\n    document.removeEventListener('keydown', handleKeydown);\n  };\n\n  var handleKeydown = function handleKeydown(event) {\n    // Only the last modal need to be escaped when pressing the esc key\n    if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {\n      return;\n    }\n\n    onEscKeyDown == null ? void 0 : onEscKeyDown(event);\n\n    if (closeOnEsc) {\n      onClose();\n    }\n  };\n\n  useEffect(function () {\n    return function () {\n      if (showPortal) {\n        // When the modal is closed or removed directly, cleanup the listeners\n        handleClose();\n      }\n    };\n  }, [showPortal]);\n  useEffect(function () {\n    // If the open prop is changing, we need to open the modal\n    // This is also called on the first render if the open prop is true when the modal is created\n    if (open && !showPortal) {\n      setShowPortal(true);\n      handleOpen();\n    }\n  }, [open]);\n\n  var handleClickOverlay = function handleClickOverlay(event) {\n    if (refShouldClose.current === null) {\n      refShouldClose.current = true;\n    }\n\n    if (!refShouldClose.current) {\n      refShouldClose.current = null;\n      return;\n    }\n\n    onOverlayClick == null ? void 0 : onOverlayClick(event);\n\n    if (closeOnOverlayClick) {\n      onClose();\n    }\n\n    refShouldClose.current = null;\n  };\n\n  var handleModalEvent = function handleModalEvent() {\n    refShouldClose.current = false;\n  };\n\n  var handleAnimationEnd = function handleAnimationEnd() {\n    if (!open) {\n      setShowPortal(false);\n    }\n\n    onAnimationEnd == null ? void 0 : onAnimationEnd();\n  };\n\n  var containerModal = container || refContainer.current;\n  var overlayAnimation = open ? (_classNames$overlayAn = classNames == null ? void 0 : classNames.overlayAnimationIn) != null ? _classNames$overlayAn : classes.overlayAnimationIn : (_classNames$overlayAn2 = classNames == null ? void 0 : classNames.overlayAnimationOut) != null ? _classNames$overlayAn2 : classes.overlayAnimationOut;\n  var modalAnimation = open ? (_classNames$modalAnim = classNames == null ? void 0 : classNames.modalAnimationIn) != null ? _classNames$modalAnim : classes.modalAnimationIn : (_classNames$modalAnim2 = classNames == null ? void 0 : classNames.modalAnimationOut) != null ? _classNames$modalAnim2 : classes.modalAnimationOut;\n  return showPortal && containerModal ? ReactDom.createPortal(React.createElement(\"div\", {\n    className: cx(classes.root, classNames == null ? void 0 : classNames.root),\n    style: styles == null ? void 0 : styles.root,\n    \"data-testid\": \"root\"\n  }, React.createElement(\"div\", {\n    className: cx(classes.overlay, classNames == null ? void 0 : classNames.overlay),\n    \"data-testid\": \"overlay\",\n    \"aria-hidden\": true,\n    style: _extends({\n      animation: overlayAnimation + \" \" + animationDuration + \"ms\"\n    }, styles == null ? void 0 : styles.overlay)\n  }), React.createElement(\"div\", {\n    ref: refModal,\n    className: cx(classes.modalContainer, center && classes.modalContainerCenter, classNames == null ? void 0 : classNames.modalContainer),\n    style: styles == null ? void 0 : styles.modalContainer,\n    \"data-testid\": \"modal-container\",\n    onClick: handleClickOverlay\n  }, React.createElement(\"div\", {\n    ref: refDialog,\n    className: cx(classes.modal, classNames == null ? void 0 : classNames.modal),\n    style: _extends({\n      animation: modalAnimation + \" \" + animationDuration + \"ms\"\n    }, styles == null ? void 0 : styles.modal),\n    onMouseDown: handleModalEvent,\n    onMouseUp: handleModalEvent,\n    onClick: handleModalEvent,\n    onAnimationEnd: handleAnimationEnd,\n    id: modalId,\n    role: role,\n    \"aria-modal\": \"true\",\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    \"data-testid\": \"modal\",\n    tabIndex: -1\n  }, focusTrapped && React.createElement(FocusTrap, {\n    container: refDialog,\n    initialFocusRef: initialFocusRef\n  }), children, showCloseIcon && React.createElement(CloseIcon, {\n    classes: classes,\n    classNames: classNames,\n    styles: styles,\n    closeIcon: closeIcon,\n    onClick: onClose,\n    id: closeIconId\n  })))), containerModal) : null;\n});\nexport default Modal;\nexport { Modal };","map":{"version":3,"mappings":"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","names":["CloseIcon","classes","classNames","styles","id","closeIcon","onClick","React","className","cx","closeButton","style","width","height","viewBox","d","isBrowser","window","candidateSelectors","isHidden","node","offsetParent","getComputedStyle","visibility","getCheckedRadio","nodes","form","i","length","checked","isNotRadioOrTabbableRadio","tagName","type","name","radioScope","ownerDocument","radioSet","querySelectorAll","undefined","getAllTabbingElements","parentElem","currentActiveElement","document","activeElement","tabbableNodes","join","onlyTabbable","disabled","getTabindex","push","tabTrappingKey","event","key","contains","process","env","NODE_ENV","console","warn","target","allTabbingElements","firstFocusableElement","lastFocusableElement","shiftKey","focus","preventDefault","tabindexAttr","parseInt","getAttribute","isNaN","isContentEditable","tabIndex","FocusTrap","container","initialFocusRef","refLastFocus","useRef","useEffect","handleKeyEvent","current","addEventListener","savePreviousFocus","findIndex","selector","_document$activeEleme","matches","requestAnimationFrame","removeEventListener","modals","modalManager","add","newModal","remove","oldModal","filter","modal","isTopModal","useModalManager","ref","open","useScrollLock","refModal","showPortal","blockScroll","reserveScrollBarGap","oldRef","disableBodyScroll","enableBodyScroll","root","overlay","overlayAnimationIn","overlayAnimationOut","modalContainer","modalContainerCenter","modalAnimationIn","modalAnimationOut","Modal","forwardRef","center","_ref$blockScroll","closeOnEsc","_ref$closeOnEsc","closeOnOverlayClick","_ref$closeOnOverlayCl","showCloseIcon","_ref$showCloseIcon","closeIconId","focusTrapped","_ref$focusTrapped","animationDuration","_ref$animationDuratio","role","_ref$role","ariaDescribedby","ariaLabelledby","modalId","onClose","onEscKeyDown","onOverlayClick","onAnimationEnd","children","refDialog","useForwardedRef","refShouldClose","refContainer","createElement","useState","setShowPortal","handleOpen","body","appendChild","handleKeydown","handleClose","removeChild","keyCode","handleClickOverlay","handleModalEvent","handleAnimationEnd","containerModal","overlayAnimation","modalAnimation","ReactDom","createPortal","animation","onMouseDown","onMouseUp"],"sources":["/Users/mac/Desktop/calculate-import-vat/node_modules/react-responsive-modal/src/CloseIcon.tsx","/Users/mac/Desktop/calculate-import-vat/node_modules/react-responsive-modal/src/utils.ts","/Users/mac/Desktop/calculate-import-vat/node_modules/react-responsive-modal/src/lib/focusTrapJs.ts","/Users/mac/Desktop/calculate-import-vat/node_modules/react-responsive-modal/src/FocusTrap.tsx","/Users/mac/Desktop/calculate-import-vat/node_modules/react-responsive-modal/src/modalManager.ts","/Users/mac/Desktop/calculate-import-vat/node_modules/react-responsive-modal/src/useScrollLock.ts","/Users/mac/Desktop/calculate-import-vat/node_modules/react-responsive-modal/src/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\ninterface CloseIconProps {\n  id?: string;\n  closeIcon?: React.ReactNode;\n  styles?: {\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  classNames?: {\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  classes: {\n    closeButton?: string;\n  };\n  onClick: () => void;\n}\n\nconst CloseIcon = ({\n  classes,\n  classNames,\n  styles,\n  id,\n  closeIcon,\n  onClick,\n}: CloseIconProps) => (\n  <button\n    id={id}\n    className={cx(classes.closeButton, classNames?.closeButton)}\n    style={styles?.closeButton}\n    onClick={onClick}\n    data-testid=\"close-button\"\n  >\n    {closeIcon ? (\n      closeIcon\n    ) : (\n      <svg\n        className={classNames?.closeIcon}\n        style={styles?.closeIcon}\n        width={28}\n        height={28}\n        viewBox=\"0 0 36 36\"\n        data-testid=\"close-icon\"\n      >\n        <path d=\"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\" />\n      </svg>\n    )}\n  </button>\n);\n\nexport default CloseIcon;\n","export const isBrowser = typeof window !== 'undefined';\n","// https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.1.0\n\nexport const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\n\nfunction isHidden(node: any) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return (\n    node.offsetParent === null || getComputedStyle(node).visibility === 'hidden'\n  );\n}\n\nfunction getCheckedRadio(nodes: any, form: any) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isNotRadioOrTabbableRadio(node: any) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio' || !node.name) {\n    return true;\n  }\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll(\n    'input[type=\"radio\"][name=\"' + node.name + '\"]'\n  );\n  var checked = getCheckedRadio(radioSet, node.form);\n  return checked === node || (checked === undefined && radioSet[0] === node);\n}\n\nexport function getAllTabbingElements(parentElem: any) {\n  var currentActiveElement = document.activeElement;\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n    if (\n      currentActiveElement === node ||\n      (!node.disabled &&\n        getTabindex(node) > -1 &&\n        !isHidden(node) &&\n        isNotRadioOrTabbableRadio(node))\n    ) {\n      onlyTabbable.push(node);\n    }\n  }\n  return onlyTabbable;\n}\n\nexport function tabTrappingKey(event: any, parentElem: any) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\nfunction getTabindex(node: any) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!isNaN(tabindexAttr)) return tabindexAttr;\n  // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node: any) {\n  return node.getAttribute('contentEditable');\n}\n","import { useEffect, useRef } from 'react';\nimport { isBrowser } from './utils';\nimport {\n  tabTrappingKey,\n  candidateSelectors,\n  getAllTabbingElements,\n} from './lib/focusTrapJs';\n\ninterface FocusTrapProps {\n  container?: React.RefObject<HTMLElement> | null;\n  initialFocusRef?: React.RefObject<HTMLElement>;\n}\n\nexport const FocusTrap = ({ container, initialFocusRef }: FocusTrapProps) => {\n  const refLastFocus = useRef<HTMLElement | null>();\n  /**\n   * Handle focus lock on the modal\n   */\n  useEffect(() => {\n    const handleKeyEvent = (event: KeyboardEvent) => {\n      if (container?.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    }\n    // On mount we focus on the first focusable element in the modal if there is one\n    if (isBrowser && container?.current) {\n      const savePreviousFocus = () => {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (\n          candidateSelectors.findIndex((selector) =>\n            document.activeElement?.matches(selector)\n          ) !== -1\n        ) {\n          refLastFocus.current = document.activeElement as HTMLElement;\n        }\n      };\n\n      if (initialFocusRef) {\n        savePreviousFocus();\n        // We need to schedule focusing on a next frame - this allows to focus on the modal root\n        requestAnimationFrame(() => {\n          initialFocusRef.current?.focus();\n        });\n      } else {\n        const allTabbingElements = getAllTabbingElements(container.current);\n        if (allTabbingElements[0]) {\n          savePreviousFocus();\n          allTabbingElements[0].focus();\n        }\n      }\n    }\n    return () => {\n      if (isBrowser) {\n        document.removeEventListener('keydown', handleKeyEvent);\n        // On unmount we restore the focus to the last focused element\n        refLastFocus.current?.focus();\n      }\n    };\n  }, [container, initialFocusRef]);\n\n  return null;\n};\n","import { Ref, useEffect } from 'react';\n\nlet modals: Ref<Element>[] = [];\n\n/**\n * Handle the order of the modals.\n * Inspired by the material-ui implementation.\n */\nexport const modalManager = {\n  /**\n   * Register a new modal\n   */\n  add: (newModal: Ref<Element>) => {\n    modals.push(newModal);\n  },\n\n  /**\n   * Remove a modal\n   */\n  remove: (oldModal: Ref<Element>) => {\n    modals = modals.filter((modal) => modal !== oldModal);\n  },\n\n  /**\n   * When multiple modals are rendered will return true if current modal is the last one\n   */\n  isTopModal: (modal: Ref<Element>) =>\n    !!modals.length && modals[modals.length - 1] === modal,\n};\n\nexport function useModalManager(ref: Ref<Element>, open: boolean) {\n  useEffect(() => {\n    if (open) {\n      modalManager.add(ref);\n    }\n    return () => {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n","import { useEffect, useRef } from 'react';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\n\nexport const useScrollLock = (\n  refModal: React.RefObject<Element>,\n  open: boolean,\n  showPortal: boolean,\n  blockScroll: boolean,\n  reserveScrollBarGap?: boolean\n) => {\n  const oldRef = useRef<Element | null>(null);\n\n  useEffect(() => {\n    if (open && refModal.current && blockScroll) {\n      oldRef.current = refModal.current;\n      disableBodyScroll(refModal.current, { reserveScrollBarGap });\n    }\n    return () => {\n      if (oldRef.current) {\n        enableBodyScroll(oldRef.current);\n        oldRef.current = null;\n      }\n    };\n  }, [open, showPortal, refModal, blockScroll, reserveScrollBarGap]);\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport CloseIcon from './CloseIcon';\nimport { FocusTrap } from './FocusTrap';\nimport { modalManager, useModalManager } from './modalManager';\nimport { useScrollLock } from './useScrollLock';\nimport { isBrowser } from './utils';\nimport useForwardedRef from '@bedrock-layout/use-forwarded-ref';\n\nconst classes = {\n  root: 'react-responsive-modal-root',\n  overlay: 'react-responsive-modal-overlay',\n  overlayAnimationIn: 'react-responsive-modal-overlay-in',\n  overlayAnimationOut: 'react-responsive-modal-overlay-out',\n  modalContainer: 'react-responsive-modal-container',\n  modalContainerCenter: 'react-responsive-modal-containerCenter',\n  modal: 'react-responsive-modal-modal',\n  modalAnimationIn: 'react-responsive-modal-modal-in',\n  modalAnimationOut: 'react-responsive-modal-modal-out',\n  closeButton: 'react-responsive-modal-closeButton',\n};\n\nexport interface ModalProps {\n  /**\n   * Control if the modal is open or not.\n   */\n  open: boolean;\n  /**\n   * Should the dialog be centered.\n   *\n   * Default to false.\n   */\n  center?: boolean;\n  /**\n   * Is the modal closable when user press esc key.\n   *\n   * Default to true.\n   */\n  closeOnEsc?: boolean;\n  /**\n   * Is the modal closable when user click on overlay.\n   *\n   * Default to true.\n   */\n  closeOnOverlayClick?: boolean;\n  /**\n   * Whether to block scrolling when dialog is open.\n   *\n   * Default to true.\n   */\n  blockScroll?: boolean;\n  /**\n   * Show the close icon.\n   *\n   * Default to true.\n   */\n  showCloseIcon?: boolean;\n  /**\n   * id attribute for the close icon button.\n   */\n  closeIconId?: string;\n  /**\n   * Custom icon to render (svg, img, etc...).\n   */\n  closeIcon?: React.ReactNode;\n  /**\n   * When the modal is open, trap focus within it.\n   *\n   * Default to true.\n   */\n  focusTrapped?: boolean;\n  /**\n   * Element to focus when focus trap is used.\n   *\n   * Default to undefined.\n   */\n  initialFocusRef?: React.RefObject<HTMLElement>;\n  /**\n   * You can specify a container prop which should be of type `Element`.\n   * The portal will be rendered inside that element.\n   * The default behavior will create a div node and render it at the at the end of document.body.\n   */\n  container?: Element | null;\n  /**\n   * An object containing classNames to style the modal.\n   */\n  classNames?: {\n    root?: string;\n    overlay?: string;\n    overlayAnimationIn?: string;\n    overlayAnimationOut?: string;\n    modalContainer?: string;\n    modal?: string;\n    modalAnimationIn?: string;\n    modalAnimationOut?: string;\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  /**\n   * An object containing the styles objects to style the modal.\n   */\n  styles?: {\n    root?: React.CSSProperties;\n    overlay?: React.CSSProperties;\n    modalContainer?: React.CSSProperties;\n    modal?: React.CSSProperties;\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  /**\n   * Animation duration in milliseconds.\n   *\n   * Default to 300.\n   */\n  animationDuration?: number;\n  /**\n   * ARIA role for modal\n   *\n   * Default to 'dialog'.\n   */\n  role?: string;\n  /**\n   * ARIA label for modal\n   */\n  ariaLabelledby?: string;\n  /**\n   * ARIA description for modal\n   */\n  ariaDescribedby?: string;\n  /**\n   * Avoid unpleasant flickering effect when body overflow is hidden. For more information see https://www.npmjs.com/package/body-scroll-lock \n   */\n  reserveScrollBarGap?: boolean;\n  /**\n   * id attribute for modal\n   */\n  modalId?: string;\n  /**\n   * Callback fired when the Modal is requested to be closed by a click on the overlay or when user press esc key.\n   */\n  onClose: () => void;\n  /**\n   * Callback fired when the escape key is pressed.\n   */\n  onEscKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?: (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => void;\n  /**\n   * Callback fired when the Modal has exited and the animation is finished.\n   */\n  onAnimationEnd?: () => void;\n  children?: React.ReactNode;\n}\n\nexport const Modal = React.forwardRef(\n  (\n    {\n      open,\n      center,\n      blockScroll = true,\n      closeOnEsc = true,\n      closeOnOverlayClick = true,\n      container,\n      showCloseIcon = true,\n      closeIconId,\n      closeIcon,\n      focusTrapped = true,\n      initialFocusRef = undefined,\n      animationDuration = 300,\n      classNames,\n      styles,\n      role = 'dialog',\n      ariaDescribedby,\n      ariaLabelledby,\n      modalId,\n      onClose,\n      onEscKeyDown,\n      onOverlayClick,\n      onAnimationEnd,\n      children,\n      reserveScrollBarGap,\n    }: ModalProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const refDialog = useForwardedRef(ref);\n    const refModal = useRef<HTMLDivElement>(null);\n    const refShouldClose = useRef<boolean | null>(null);\n    const refContainer = useRef<HTMLDivElement | null>(null);\n    // Lazily create the ref instance\n    // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n    if (refContainer.current === null && isBrowser) {\n      refContainer.current = document.createElement('div');\n    }\n\n    // The value should be false for srr, that way when the component is hydrated client side,\n    // it will match the server rendered content\n    const [showPortal, setShowPortal] = useState(false);\n\n    // Hook used to manage multiple modals opened at the same time\n    useModalManager(refModal, open);\n\n    // Hook used to manage the scroll\n    useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap);\n\n    const handleOpen = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        !document.body.contains(refContainer.current)\n      ) {\n        document.body.appendChild(refContainer.current);\n      }\n\n      document.addEventListener('keydown', handleKeydown);\n    };\n\n    const handleClose = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        document.body.contains(refContainer.current)\n      ) {\n        document.body.removeChild(refContainer.current);\n      }\n      document.removeEventListener('keydown', handleKeydown);\n    };\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      // Only the last modal need to be escaped when pressing the esc key\n      if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {\n        return;\n      }\n\n      onEscKeyDown?.(event);\n\n      if (closeOnEsc) {\n        onClose();\n      }\n    };\n\n    useEffect(() => {\n      return () => {\n        if (showPortal) {\n          // When the modal is closed or removed directly, cleanup the listeners\n          handleClose();\n        }\n      };\n    }, [showPortal]);\n\n    useEffect(() => {\n      // If the open prop is changing, we need to open the modal\n      // This is also called on the first render if the open prop is true when the modal is created\n      if (open && !showPortal) {\n        setShowPortal(true);\n        handleOpen();\n      }\n    }, [open]);\n\n    const handleClickOverlay = (\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      if (refShouldClose.current === null) {\n        refShouldClose.current = true;\n      }\n\n      if (!refShouldClose.current) {\n        refShouldClose.current = null;\n        return;\n      }\n\n      onOverlayClick?.(event);\n\n      if (closeOnOverlayClick) {\n        onClose();\n      }\n\n      refShouldClose.current = null;\n    };\n\n    const handleModalEvent = () => {\n      refShouldClose.current = false;\n    };\n\n    const handleAnimationEnd = () => {\n      if (!open) {\n        setShowPortal(false);\n      }\n\n      onAnimationEnd?.();\n    };\n\n    const containerModal = container || refContainer.current;\n\n    const overlayAnimation = open\n      ? classNames?.overlayAnimationIn ?? classes.overlayAnimationIn\n      : classNames?.overlayAnimationOut ?? classes.overlayAnimationOut;\n\n    const modalAnimation = open\n      ? classNames?.modalAnimationIn ?? classes.modalAnimationIn\n      : classNames?.modalAnimationOut ?? classes.modalAnimationOut;\n\n    return showPortal && containerModal\n      ? ReactDom.createPortal(\n          <div\n            className={cx(classes.root, classNames?.root)}\n            style={styles?.root}\n            data-testid=\"root\"\n          >\n            <div\n              className={cx(classes.overlay, classNames?.overlay)}\n              data-testid=\"overlay\"\n              aria-hidden={true}\n              style={{\n                animation: `${overlayAnimation} ${animationDuration}ms`,\n                ...styles?.overlay,\n              }}\n            />\n            <div\n              ref={refModal}\n              className={cx(\n                classes.modalContainer,\n                center && classes.modalContainerCenter,\n                classNames?.modalContainer\n              )}\n              style={styles?.modalContainer}\n              data-testid=\"modal-container\"\n              onClick={handleClickOverlay}\n            >\n              <div\n                ref={refDialog}\n                className={cx(classes.modal, classNames?.modal)}\n                style={{\n                  animation: `${modalAnimation} ${animationDuration}ms`,\n                  ...styles?.modal,\n                }}\n                onMouseDown={handleModalEvent}\n                onMouseUp={handleModalEvent}\n                onClick={handleModalEvent}\n                onAnimationEnd={handleAnimationEnd}\n                id={modalId}\n                role={role}\n                aria-modal=\"true\"\n                aria-labelledby={ariaLabelledby}\n                aria-describedby={ariaDescribedby}\n                data-testid=\"modal\"\n                tabIndex={-1}\n              >\n                {focusTrapped && (\n                  <FocusTrap\n                    container={refDialog}\n                    initialFocusRef={initialFocusRef}\n                  />\n                )}\n                {children}\n                {showCloseIcon && (\n                  <CloseIcon\n                    classes={classes}\n                    classNames={classNames}\n                    styles={styles}\n                    closeIcon={closeIcon}\n                    onClick={onClose}\n                    id={closeIconId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>,\n          containerModal\n        )\n      : null;\n  }\n);\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}